12.1 - What are React hooks, why do we use them and what rules should we follow when using them?

    - What are Hooks?
        - Hooks allow us to "hook" into React features such as state and lifecycle methods.
        - Hooks were added to React in version 16.8. (2019)

    - Use of Hooks
        - Hooks allow function components to have access to state, lifecycle methods and other React features.

    - Rules when using Hooks 
        - Starts with "use" 
        - Component must be uppercase
        - Invoke inside function/component body
        - Don't call hooks conditionally



















12.2 - Basic React hooks: steps to implement useState() hook

    - Use of React useState Hook
        - The React useState Hook allows us to track state in a function component.
            - State generally refers to data or properties that needs to be tracked in an application.
    
    - Steps to use useState() hook

        - Import useState from React
            - At the top of your component, import the useState Hook.
                - Example:
                    import { useState } from "react";
        
        - Initialize useState
            - useState accepts an initial state and returns two values:
                - The current state.
                - A function that updates the state.

                    - Example:
                        const [color, setColor] = useState("green");

                        * These names are variables that can be named anything you would like.




        
        - Read State
            - After importing and initializing useState, we can now include our state anywhere in our component.

            - To read or call the state Use the state variable in the rendered component.

                - Example: <h1>My favorite color is {color}!</h1>

    - What can State Hold
        - The useState Hook can be used to keep track of:
            - strings, 
            - numbers, 
            - booleans, 
            - arrays, 
            - objects, and 
            - any combination of these

    - Update State
        - To update our state, we use our state updater function.
            - Example: 
                <button type="button" onClick={() => setColor("blue")}>Blue</button>

        NOTE
        ****
            - We should NEVER directly update state. 
                - Example: color = "red" is not allowed.

























12.3 - Basic React hooks: using useState() to change a stateâ€™s value based on previous state value

    - We could create multiple state Hooks to track individual values.
        - Example:
            const [brand, setBrand] = useState("Ford");
            const [model, setModel] = useState("Mustang");
            const [year, setYear] = useState("1964");
            const [color, setColor] = useState("red");

    - We can just use one state and include an object instead!
        - Example:
            const [car, setCar] = useState({
                brand: "Ford",
                model: "Mustang",
                year: "1964",
                color: "red"
            });

    - Why Callback functions are necessary
        - Updating State value for the objects above without callback function would cause us to loose the data that is not updated.
        
        - Therefore, always use callback function when updating states to avoid errors.

















12.4 - Basic React hooks: steps to implement useEffect() hook

    - Use of React useEffect Hooks
        - The useEffect Hook allows you to perform side effects in your components.
        - Some examples of side effects are: fetching data, directly updating the DOM, and setting up timers.

    - Steps to use useEffect() hook & syntax
        - Import useEffect from React
        - Call the method and pass a callback function with anything you want to change(be side effect)

        - syntax 
            - useEffect(<function>, <dependency>)
                
                - useEffect accepts two arguments. The second argument is optional.

                - 1. No dependency passed:
                        useEffect(() => {
                            //Runs on every render
                        });

                - 2. An empty array:
                        useEffect(() => {
                            //Runs only on the first render
                        }, []);
                        
                - 3. Props or state values:
                        useEffect(() => {
                            //Runs on the first render
                            //And any time any dependency value changes
                        }, [prop, state]);

        - Effect Cleanup (component unmount)
            - Some effects require cleanup to reduce memory leaks.
            - Timeouts, subscriptions, event listeners, and other effects that are no longer needed should be disposed.
            - We do this by including a return function at the end of the useEffect Hook.

            - Example:
                useEffect(() => {
                    // effect
                    return () => {
                       // cleanup
                    };
                }, [<dependency>]); 


























12.5 - Basic React hooks: steps to implement context API and useContext() hook

    - What is React Context
        - React Context is a way to manage state globally.
        - It can be used together with the useState Hook to share state between deeply nested components.

    - The problem (what caused the need for context API)
    
        - State should be held by the highest parent component in the stack that requires access to the state.

        - To illustrate, we have many nested components. The component at the top and bottom of the stack need access to the state.

        - To do this without Context, we will need to pass the state as "props" through each nested component. This is called "prop drilling".

        - Even though some of the in between components did not need the state, they had to pass the state along so that it could reach the component that needs the state value.

        - i.e: (Use the article below for picture illustration)
        
            - https://blogs.perficient.com/2021/12/03/understanding-react-context-and-property-prop-drilling/

                        or

            - https://www.freecodecamp.org/news/react-context-in-5-minutes/
    
    - Steps to implement context API

        - Create Context
            - Import createContext and initialize it
                - Example: 
                    import { useState, createContext } from "react";
                    const MyContext = createContext();

        - Context Provider
            - Wrap child components in the Context Provider. 
            - Supply the state value.
            - Export your context to be consumed by the child component 
                - Example:
                    function Component1() {
                        const [user, setUser] = useState("Abebe");

                        return (
                            <MyContext.Provider value={user}>
                                <Component2 user={user} />
                            </MyContext.Provider>
                        );
                    }
                    export default Component1;

        - Consume or use the context
            - Import context provider component
            - Then, there are two ways to use it.
                1. <MyContext.Consumer></MyContext.Consumer>
                    - Use the data in between your consumer JSX format
                    - Example:
                        import {MyContext} from "../../Component1";
                        function Component2() {
                            return (
                                <div>
                                    <MyContext.Consumer>
                                        {(user)=>{
                                            return(
                                                <div>
                                                    <h1>Component 2</h1>
                                                    <h2>{`Hello ${user}!`}</h2>
                                                </div>
                                            );
                                        }}
                                    </MyContext.Consumer>
                                </div>
                            );
                        }
                        export default Component2;

                2. useContext() hook
                    - Import useContext from react
                    - use the hook and tell it to use the data coming from your context provider

                    - Example:
                        import {useContext} from "react";
                        import {MyContext} from "../../Component1";
                        function Component3() {
                            const user = useContext(MyContext);

                            return (
                                <div>
                                    <h1>Component 3</h1>
                                    <h2>{`Hello ${user}!`}</h2>
                                </div>
                            );
                        }
                        export default Component3;



    - Class example folder structure (context API)

        - App.js ----- "Data source"
            - Component1
                - Component2
                    - Component3  ----- "Use the data here!"
                    - UsingUseContext ----- "Use the data here!"

    - Additional ContextAPI YouTube tutorial (30 min)
            https://www.youtube.com/watch?v=35lXWvCuM8o


